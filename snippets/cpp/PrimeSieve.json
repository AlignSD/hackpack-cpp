{
    "PrimeSieve.h": {
        "body": [
            "// standard prime sieve, O(n log log n)", 
            "// can sieve up to 1e8 ish", 
            "// returns all primes strictly less than lim", 
            "", 
            "const int MAX_PR = 5'000'000;", 
            "bitset<MAX_PR> isprime;", 
            "vector<int> primeSieve(int lim) {", 
            "\tisprime.set();", 
            "\tisprime[0] = isprime[1] = 0;", 
            "\tfor (int i = 4; i < lim; i += 2) isprime[i] = 0;", 
            "\tfor (int i = 3; i * i < lim; i += 2)", 
            "\t\tif (isprime[i])", 
            "\t\t\tfor (int j = i * i; j < lim; j += i * 2) isprime[j] = 0;", 
            "\tvector<int> pr;", 
            "\tfor (int i = 2; i < lim; i++)", 
            "\t\tif (isprime[i]) pr.push_back(i);", 
            "\treturn pr;", 
            "}"
        ], 
        "prefix": [
            "hack_PrimeSieve"
        ]
    }
}