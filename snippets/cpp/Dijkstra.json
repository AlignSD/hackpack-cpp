{
    "Dijkstra.h": {
        "body": [
            "template <class T>",
            "pair<vector<bool>, vector<T>> dijkstra(",
            " const vector<vector<pair<int, T>>>& adj, int s) {",
            "\tusing ST = pair<T, int>;",
            "\tpriority_queue<ST, vector<ST>, greater<ST>> q;",
            "\tvector<T> dist(adj.size());",
            "\tvector<bool> seen(adj.size());",
            "\tq.emplace(T{}, s);",
            "\tseen[s] = 1;",
            "\twhile (!q.empty()) {",
            "\t\tauto [d, u] = q.top();",
            "\t\tq.pop();",
            "\t\tif (dist[u] < d) continue;",
            "\t\tfor (auto [v, w] : adj[u])",
            "\t\t\tif (!seen[v] || d + w < dist[v]) {",
            "\t\t\t\tq.emplace(dist[v] = d + w, v);",
            "\t\t\t\tseen[v] = 1;",
            "\t\t\t}",
            "\t}",
            "\treturn {seen, dist};",
            "}"
        ],
        "description": "Computes shortest paths from s\nto any node reachable from s.\nPass in an adjacency list of pairs (node, weight).",
        "prefix": [
            "hack_Dijkstra"
        ]
    }
}