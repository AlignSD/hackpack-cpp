{
    "SCCTarjan.h": {
        "body": [
            "namespace SCCTarjan {",
            "\tvector<int> val, comp, z, cont;",
            "\tint Time, ncomps;",
            "\ttemplate <class G, class F>",
            "\tint dfs(int j, G& g, F& f) {",
            "\t\tint low = val[j] = ++Time, x;",
            "\t\tz.push_back(j);",
            "\t\tfor (auto e : g[j])",
            "\t\t\tif (comp[e] < 0) low = min(low, val[e] ?: dfs(e, g, f));",
            "\t\tif (low == val[j]) {",
            "\t\t\tdo {",
            "\t\t\t\tx = z.back();",
            "\t\t\t\tz.pop_back();",
            "\t\t\t\tcomp[x] = ncomps;",
            "\t\t\t\tcont.push_back(x);",
            "\t\t\t} while (x != j);",
            "\t\t\tf(cont);",
            "\t\t\tcont.clear();",
            "\t\t\tncomps++;",
            "\t\t}",
            "\t\treturn val[j] = low;",
            "\t}",
            "\ttemplate <class G, class F>",
            "\tvector<int> scc(G& g, F f) {",
            "\t\tint n = g.size();",
            "\t\tval.assign(n, 0);",
            "\t\tcomp.assign(n, -1);",
            "\t\tTime = ncomps = 0;",
            "\t\tfor (int i = 0; i < n; i++)",
            "\t\t\tif (comp[i] < 0) dfs(i, g, f);",
            "\t\treturn comp;",
            "\t}",
            "\ttemplate <class G> // convenience function w/o lambda",
            "\tvector<int> scc(G& g) {",
            "\t\treturn scc(g, [](auto& v) {});",
            "\t}",
            "} // namespace SCCTarjan"
        ],
        "description": "Finds strongly connected components of a\ndirected graph. Visits/indexes SCCs in reverse\ntopological order.",
        "prefix": [
            "hack_SCCTarjan"
        ]
    }
}