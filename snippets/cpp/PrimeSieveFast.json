{
    "PrimeSieveFast.h": {
        "body": [
            "const int LIM = 1e8;",
            "bitset<LIM> isPrime;",
            "vector<int> primeSieve() {",
            "\tconst int S = round(sqrt(LIM)), R = LIM / 2;",
            "\tvector<int> pr = {2}, sieve(S + 1);",
            "\tpr.reserve(int(LIM / log(LIM) * 1.1));",
            "\tvector<pair<int, int>> cp;",
            "\tfor (int i = 3; i <= S; i += 2)",
            "\t\tif (!sieve[i]) {",
            "\t\t\tcp.push_back({i, i * i / 2});",
            "\t\t\tfor (int j = i * i; j <= S; j += 2 * i) sieve[j] = 1;",
            "\t\t}",
            "\tfor (int L = 1; L <= R; L += S) {",
            "\t\tarray<bool, S> block{};",
            "\t\tfor (auto& [p, idx] : cp)",
            "\t\t\tfor (int i = idx; i < S + L; idx = (i += p))",
            "\t\t\t\tblock[i - L] = 1;",
            "\t\tfor (int i = 0; i < min(S, R - L); i++)",
            "\t\t\tif (!block[i]) pr.push_back((L + i) * 2 + 1);",
            "\t}",
            "\tfor (int i : pr) isPrime[i] = 1;",
            "\treturn pr;",
            "}"
        ],
        "description": "Prime sieve for generating all primes smaller\nthan LIM.\n",
        "prefix": [
            "hack_PrimeSieveFast"
        ]
    }
}