{
    "Fraction.h": {
        "body": [
            "template <typename T>",
            "struct Q {",
            "\tT a, b;",
            "\tQ(T p, T q = 1) {",
            "\t\tT g = gcd(p, q);",
            "\t\ta = p / g;",
            "\t\tb = q / g;",
            "\t\tif (b < 0) a = -a, b = -b;",
            "\t}",
            "\tT gcd(T x, T y) const { return __gcd(x, y); }",
            "\tQ operator+(const Q& o) const {",
            "\t\treturn {a * o.b + o.a * b, b * o.b};",
            "\t}",
            "\tQ operator-(const Q& o) const {",
            "\t\treturn *this + Q(-o.a, o.b);",
            "\t}",
            "\tQ operator*(const Q& o) const { return {a * o.a, b * o.b}; }",
            "\tQ operator/(const Q& o) const { return *this * Q(o.b, o.a); }",
            "\tQ recip() const { return {b, a}; }",
            "\tint signum() const { return (a > 0) - (a < 0); }",
            "\tbool operator<(const Q& o) const {",
            "\t\treturn a * o.b < o.a * b;",
            "\t}",
            "\tfriend ostream& operator<<(ostream& cout, const Q& o) {",
            "\t\treturn cout << o.a << \"/\" << o.b;",
            "\t}",
            "};"
        ],
        "description": "Struct for representing fractions/rationals.\nAll ops are $O(\\log N)$ due to GCD in constructor.\nUses cross multiplication.",
        "prefix": [
            "hack_Fraction"
        ]
    }
}