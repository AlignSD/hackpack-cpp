{
    "SCCKosaraju.h": {
        "body": [
            "namespace SCCKosaraju {",
            "\tvector<vector<int>> adj, radj;",
            "\tvector<int> todo, comp;",
            "\tvector<bool> vis;",
            "\tvoid dfs1(int x) {",
            "\t\tvis[x] = 1;",
            "\t\tfor (int y : adj[x])",
            "\t\t\tif (!vis[y]) dfs1(y);",
            "\t\ttodo.push_back(x);",
            "\t}",
            "\tvoid dfs2(int x, int i) {",
            "\t\tcomp[x] = i;",
            "\t\tfor (int y : radj[x])",
            "\t\t\tif (comp[y] == -1) dfs2(y, i);",
            "\t}",
            "\tvector<int> scc(vector<vector<int>>& _adj) {",
            "\t\tadj = _adj;",
            "\t\tint time = 0, n = adj.size();",
            "\t\tcomp.resize(n, -1), radj.resize(n), vis.resize(n);",
            "\t\tfor (int x = 0; x < n; x++)",
            "\t\t\tfor (int y : adj[x]) radj[y].push_back(x);",
            "\t\tfor (int x = 0; x < n; x++)",
            "\t\t\tif (!vis[x]) dfs1(x);",
            "\t\treverse(todo.begin(), todo.end());",
            "\t\tfor (int x : todo)",
            "\t\t\tif (comp[x] == -1) dfs2(x, time++);",
            "\t\treturn comp;",
            "\t}",
            "}; // namespace SCCKosaraju"
        ],
        "description": "Finds strongly connected components of a\ndirected graph. Visits/indexes SCCs in\ntopological order.",
        "prefix": [
            "hack_SCCKosaraju"
        ]
    }
}